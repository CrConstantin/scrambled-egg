#summary Detailed help about Scrambled-Egg.
#labels Featured,Phase-Support,Help

= Introduction =

Scrambled-Egg is made for compressing and encrypting your data.<br>
The input data can be : plain text, formatted text, or a binary file (currently not supported from GUI).<br>
The result can be kept/sent as printable plain text, or as a little square image.

= Details =

First of all, Scrambled-Egg *is not* a text editor.<br>
If you want to use formatted text, write your text in a text processor (Microsoft Word, Open Office, etc), then paste, or drag and drop the formatted text in the *left text-box*.<br>
Scrambled-Egg supports HTML and the formatting will be remembered upon encryption/ decryption, if you check the "Formatted text" checkbox. If you don't, the text will be plain-text.

The original data is scrambled in 3 steps :
  * Step 1 (*pre processing*)  : No processing, ZLIB, BZ2, or ROT13
  * Step 2 (*real encryption*) : AES, ARC2, Blowfish, CAST, DES3, RSA, or No encryption
  * Step 3 (*post processing*) : Base64, Base32, HEX, Quopri, String escape, Json, XML, or UU Codec

All 3 steps are important, you _should_ use them all.<br>
The password is optional, and it's only used in step 2 (encryption).<br>
Step 3 (post processing) is *required*, the rest are *optional*.

The resulted string contains a _pre/enc/post tag_ in this form:
"_<#>pre:encryption:post<#>_", where :
 * "_pre_" represents one of the values from Step 1,
 * "_encryption_" is one of the values from Step 2 and
 * "_post_" is a value from Step 3.

This _pre/enc/post tag_ can be deleted when keeping/sending the scrambled data, but it's important if you don't remember, or don't know _how_ to decrypt the data back !<br>
<br>
For example, if someone scrambles the data with BZ2 + DES3 + HEX, and you try to decrypt it with ZLIB + DES3 + HEX, it will fail. You will have to try all combinations of pre/enc/post operations, even if you already know the password !

= Tips =

  * _Never ever_ use Quopri Codec with binary files (images, music, Doc/Xls files, executable files). The result after decoding might differ from the original file !
  * Base32 Codec is VERY slow, so never use it for large files (few MBs).
  * The GUI will freeze for a looong time if you try to encrypt/ decrypt more than 200.000-300.000 characters !
  * You must type a password in the Password Field, if you want to encrypt your files :) If you don't provide a password, the letter '_X_' is used.
  * The most common passwords are : 111111, 123456, 123456789, Password, iloveyou, princess, rockyou, abc123, Querty. Don't use common passwords for protecting your data.

= A few examples =

  * you *must* destroy the _evidence_! -(password 'dodo')-> <#>N:AES:64<#>SBGtCtZphIoz9CaUmMhVvCYDoXd7JfU6jzUCFEnNeTM=
  * no-one will know about your secret -(password 'ph0enix')-> <#>R:B:32<#>QJMR5WVZGBZJFGN4DVB5DOXDXOW5AXTQAKTDSPQ7RJNLPPJHKK3Q73AUBGMH4JJGOFVOFUJT65UU2===
  * Lorem ipsum dolor sit amet, ( ... ) Suspendisse potenti. (this text has 2000 characters) --> The resulted string has 1231 characters with BZ2/ AES/ Base64.